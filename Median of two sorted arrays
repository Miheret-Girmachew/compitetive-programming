class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        A= nums1
        B= nums2
        total = len(nums1)+len(nums2)
        half= total//2    
        if len(B)< len(A):
            A,B = B,A
        L,R = 0 , len(A)-1
        while True:
            i = (L+R)//2
            j = half-i-2
            Aleft = A[i] if i >= 0 else float("-infinity")
            Aright = A[i+1] if(i+1)< len(A) else float("infinity")
            Bleft = B[j] if j >= 0 else float("-infinity")
            Bright = B[j+1] if(j+1)< len(B) else float("infinity")
            
            if Aleft<= Bright and Bleft<= Aright:
                if total%2:
                    return min(Aright, Bright) 
                return (max(Aleft, Bleft) + min(Aright, Bright))/2
            elif  Aleft> Bright:
                R=i-1
            else :
                L=i+1
                
                
    """
     for O(m+n) time complexity
        m = len(nums1)
        n = len(nums2)
        total = nums1 + nums2
        t =  len(total)
        if t%2!=0:
            index=(t+1)//2
            return total[index]
        else:
            index1=t/2
            index2=t/2+1
            return (total(index1)+total(index2))/2"""
          
